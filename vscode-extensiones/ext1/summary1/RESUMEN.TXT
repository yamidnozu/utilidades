
/* Inicio .vscodeignore */
.vscode/**
.vscode-test/**
src/**
.gitignore
.yarnrc
vsc-extension-quickstart.md
**/tsconfig.json
**/.eslintrc.json
**/*.map
**/*.ts
**/.vscode-test.*
node_modules/**
/* Fin .vscodeignore */

/* Inicio out\extension.js */
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deactivate = exports.activate = void 0;
const vscode = __importStar(require("vscode"));
const SummaryViewProvider_1 = require("./SummaryViewProvider");
function activate(context) {
    console.log('Activating extension');
    const provider = new SummaryViewProvider_1.SummaryViewProvider(context.extensionUri);
    console.log('Provider created');
    context.subscriptions.push(vscode.window.registerWebviewViewProvider(SummaryViewProvider_1.SummaryViewProvider.viewType, provider));
    console.log('Provider registered');
    let disposable = vscode.commands.registerCommand('summary1.runSummary', async () => {
        const config = vscode.workspace.getConfiguration('summary1');
        const configurations = config.get('configurations');
        if (configurations.length === 0) {
            vscode.window.showErrorMessage('No se encontraron configuraciones. Por favor, crea una configuración primero.');
            return;
        }
        if (configurations.length === 1) {
            await provider.runSummary(configurations[0].name);
            return;
        }
        const selected = await vscode.window.showQuickPick(configurations.map(c => c.name), { placeHolder: 'Selecciona una configuración para generar el resumen' });
        if (selected) {
            await provider.runSummary(selected);
        }
    });
    context.subscriptions.push(disposable);
}
exports.activate = activate;
function deactivate() { }
exports.deactivate = deactivate;
//# sourceMappingURL=extension.js.map
/* Fin out\extension.js */

/* Inicio out\extension.js.map */
{"version":3,"file":"extension.js","sourceRoot":"","sources":["../src/extension.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,+CAAiC;AACjC,+DAA4D;AAE5D,SAAgB,QAAQ,CAAC,OAAgC;IACrD,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;IACpC,MAAM,QAAQ,GAAG,IAAI,yCAAmB,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IAC/D,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;IAEhC,OAAO,CAAC,aAAa,CAAC,IAAI,CACtB,MAAM,CAAC,MAAM,CAAC,2BAA2B,CAAC,yCAAmB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CACpF,CAAC;IACF,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;IAEnC,IAAI,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;QAC/E,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QAC7D,MAAM,cAAc,GAAG,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAA4B,CAAC;QAE/E,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;YAC7B,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,+EAA+E,CAAC,CAAC;YAChH,OAAO;SACV;QAED,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;YAC7B,MAAM,QAAQ,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAClD,OAAO;SACV;QAED,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,aAAa,CAC9C,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAC/B,EAAE,WAAW,EAAE,sDAAsD,EAAE,CAC1E,CAAC;QAEF,IAAI,QAAQ,EAAE;YACV,MAAM,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;SACvC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC3C,CAAC;AAnCD,4BAmCC;AAED,SAAgB,UAAU,KAAI,CAAC;AAA/B,gCAA+B"}
/* Fin out\extension.js.map */

/* Inicio out\SummaryViewProvider.js */
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SummaryViewProvider = void 0;
const fs = __importStar(require("fs"));
const micromatch_1 = __importDefault(require("micromatch"));
const path = __importStar(require("path"));
const vscode = __importStar(require("vscode"));
class SummaryViewProvider {
    _extensionUri;
    static viewType = 'summaryConfigView';
    constructor(_extensionUri) {
        this._extensionUri = _extensionUri;
    }
    resolveWebviewView(webviewView, context, _token) {
        webviewView.webview.options = { enableScripts: true };
        webviewView.webview.html = this.getWebviewContent(webviewView.webview);
        webviewView.webview.onDidReceiveMessage(async (message) => {
            switch (message.command) {
                case 'saveConfig':
                    try {
                        const savedConfigName = await this.saveConfiguration(message);
                        await this.sendConfigsToWebview(webviewView.webview);
                        webviewView.webview.postMessage({ command: 'configSaved', configName: savedConfigName });
                    }
                    catch (error) {
                        console.error('Error saving configuration:', error);
                    }
                    break;
                case 'runSummary':
                    if (message.configName) {
                        await this.runSummary(message.configName);
                    }
                    else {
                        vscode.window.showErrorMessage('No configuration selected.');
                    }
                    break;
                case 'getConfigs':
                    await this.sendConfigsToWebview(webviewView.webview);
                    break;
                case 'deleteConfig':
                    if (message.configName) {
                        await this.deleteConfiguration(message.configName);
                        await this.sendConfigsToWebview(webviewView.webview);
                    }
                    else {
                        vscode.window.showErrorMessage('No configuration selected for deletion.');
                    }
                    break;
                case 'findExtensions':
                    try {
                        const extensions = await this.findExtensions(message.directoryPath, message.allowedDirectories.split(',').map((dir) => dir.trim()), message.excludedDirectories.split(',').map((dir) => dir.trim()), message.excludedFiles.split(',').map((file) => file.trim()), message.showAllExtensions // Enviar preferencia para mostrar todas las combinaciones de extensiones
                        );
                        webviewView.webview.postMessage({
                            command: 'setExtensions',
                            extensions: Array.from(extensions)
                        });
                    }
                    catch (error) {
                        console.error('Error finding extensions:', error);
                        webviewView.webview.postMessage({
                            command: 'setExtensions',
                            extensions: []
                        });
                    }
                    break;
            }
        });
        this.sendConfigsToWebview(webviewView.webview);
    }
    async findExtensions(directoryPath, allowedDirectories, excludedDirectories, excludedFiles, showAllExtensions) {
        const extensions = new Set();
        const isExcluded = (relativePath) => {
            const normalizedPath = this.normalizePath(relativePath);
            return micromatch_1.default.isMatch(normalizedPath, excludedDirectories.map(this.normalizePath)) ||
                micromatch_1.default.isMatch(path.basename(normalizedPath), excludedFiles);
        };
        const processDirectory = (dir, basePath) => {
            const files = fs.readdirSync(dir);
            for (const file of files) {
                const fullPath = path.join(dir, file);
                const relativePath = path.relative(basePath, fullPath);
                if (isExcluded(relativePath)) {
                    continue;
                }
                if (fs.statSync(fullPath).isDirectory()) {
                    processDirectory(fullPath, basePath); // Recursively process subdirectories
                }
                else {
                    const parts = file.split('.');
                    if (parts.length > 1) {
                        if (showAllExtensions) {
                            for (let i = 1; i < parts.length; i++) {
                                const ext = '.' + parts.slice(i).join('.').toLowerCase();
                                extensions.add(ext);
                            }
                        }
                        else {
                            const ext = '.' + parts[parts.length - 1].toLowerCase();
                            extensions.add(ext);
                        }
                    }
                }
            }
        };
        if (allowedDirectories.length > 0) {
            for (const allowedDir of allowedDirectories) {
                const fullAllowedPath = path.join(directoryPath, allowedDir);
                if (fs.existsSync(fullAllowedPath)) {
                    processDirectory(fullAllowedPath, directoryPath);
                }
            }
        }
        else {
            processDirectory(directoryPath, directoryPath);
        }
        return extensions;
    }
    async runSummary(configName) {
        const config = vscode.workspace.getConfiguration('summary1');
        const configurations = config.get('configurations');
        const selectedConfig = configurations.find(c => c.name === configName);
        if (!selectedConfig) {
            vscode.window.showErrorMessage('Configuración seleccionada no encontrada.');
            return;
        }
        const { directoryPath, allowedDirectories, excludedDirectories, excludedFiles, extensions, showAllExtensions } = selectedConfig;
        if (!directoryPath || extensions.length === 0) {
            vscode.window.showErrorMessage('Por favor, configure todos los ajustes antes de generar el resumen.');
            return;
        }
        try {
            const summaryContent = await this.generateSummary(directoryPath, allowedDirectories, excludedDirectories, excludedFiles, extensions);
            if (summaryContent.trim() === '') {
                vscode.window.showErrorMessage('No se encontró contenido para el resumen. Verifique las extensiones y directorios seleccionados.');
                return;
            }
            const summaryPath = path.join(directoryPath, 'RESUMEN.TXT');
            fs.writeFileSync(summaryPath, summaryContent);
            vscode.window.showInformationMessage(`Resumen completado con éxito! Guardado en ${summaryPath}`);
        }
        catch (error) {
            vscode.window.showErrorMessage(`Error al generar el resumen: ${error}`);
        }
    }
    async generateSummary(directoryPath, allowedDirectories, excludedDirectories, excludedFiles, extensions) {
        let summaryContent = '';
        const isExcluded = (relativePath) => {
            const normalizedPath = this.normalizePath(relativePath);
            return micromatch_1.default.isMatch(normalizedPath, excludedDirectories.map(this.normalizePath)) ||
                micromatch_1.default.isMatch(path.basename(normalizedPath), excludedFiles);
        };
        const processDirectory = (dir, basePath) => {
            const files = fs.readdirSync(dir);
            for (const file of files) {
                const fullPath = path.join(dir, file);
                const relativePath = path.relative(basePath, fullPath);
                if (isExcluded(relativePath)) {
                    continue;
                }
                if (fs.statSync(fullPath).isDirectory()) {
                    processDirectory(fullPath, basePath); // Recursively process subdirectories
                }
                else {
                    const parts = file.split('.');
                    if (parts.length > 1) {
                        for (let i = 1; i < parts.length; i++) {
                            const ext = '.' + parts.slice(i).join('.').toLowerCase();
                            if (extensions.includes(ext)) {
                                const content = fs.readFileSync(fullPath, 'utf8');
                                summaryContent += `\n/* Inicio ${relativePath} */\n${content}\n/* Fin ${relativePath} */\n`;
                                break; // Stop after the first matching extension
                            }
                        }
                    }
                }
            }
        };
        if (allowedDirectories.length > 0) {
            for (const allowedDir of allowedDirectories) {
                const fullAllowedPath = path.join(directoryPath, allowedDir);
                if (fs.existsSync(fullAllowedPath)) {
                    processDirectory(fullAllowedPath, directoryPath);
                }
            }
        }
        else {
            processDirectory(directoryPath, directoryPath);
        }
        return summaryContent;
    }
    normalizePath(inputPath) {
        let normalized = inputPath.replace(/\\/g, '/');
        normalized = normalized.replace(/([^:])\/+/g, '$1/');
        return normalized;
    }
    async sendConfigsToWebview(webview) {
        const config = vscode.workspace.getConfiguration('summary1');
        const configurations = config.get('configurations');
        webview.postMessage({
            command: 'setConfigs',
            configurations: configurations.map(c => ({
                ...c,
                allowedDirectories: c.allowedDirectories.join(', '),
                excludedDirectories: c.excludedDirectories.join(', '),
                excludedFiles: c.excludedFiles.join(', '),
                showAllExtensions: c.showAllExtensions !== undefined ? c.showAllExtensions : false // Establecer un valor por defecto si no está presente
            }))
        });
    }
    async saveConfiguration(message) {
        try {
            const config = vscode.workspace.getConfiguration('summary1');
            let configurations = config.get('configurations');
            const newConfig = {
                name: message.name,
                directoryPath: message.directoryPath,
                allowedDirectories: message.allowedDirectories.split(',').map((dir) => dir.trim()),
                excludedDirectories: message.excludedDirectories.split(',').map((dir) => dir.trim()),
                excludedFiles: message.excludedFiles.split(',').map((file) => file.trim()),
                extensions: message.extensions,
                showAllExtensions: message.showAllExtensions // Guardar la preferencia de mostrar todas las extensiones
            };
            const existingIndex = configurations.findIndex(c => c.name === newConfig.name);
            if (existingIndex !== -1) {
                configurations[existingIndex] = newConfig;
            }
            else {
                configurations.push(newConfig);
            }
            await config.update('configurations', configurations, vscode.ConfigurationTarget.Global);
            vscode.window.showInformationMessage('Configuración guardada correctamente');
            return newConfig.name;
        }
        catch (error) {
            vscode.window.showErrorMessage(`Error al guardar la configuración: ${error}`);
            throw error;
        }
    }
    async deleteConfiguration(configName) {
        try {
            const config = vscode.workspace.getConfiguration('summary1');
            let configurations = config.get('configurations');
            configurations = configurations.filter(c => c.name !== configName);
            await config.update('configurations', configurations, vscode.ConfigurationTarget.Global);
            vscode.window.showInformationMessage('Configuración eliminada exitosamente');
        }
        catch (error) {
            vscode.window.showErrorMessage(`Error al eliminar la configuración: ${error}`);
        }
    }
    getWebviewContent(webview) {
        return `
            <!DOCTYPE html>
            <html lang="es">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Configuración de eDev Summary</title>
                <style>
                    :root {
                        --background: #1e1e1e;
                        --foreground: #e0e0e0;
                        --primary: #2c2c2c;
                        --secondary: #383838;
                        --highlight: #2d8ce2; 
                        --badge-default: #6a6a6a; 
                        --accent: #6a6a6a;
                        --error: #b85c5c;
                        --success: #4caf50;
                        --toggle-off: #888;
                        --toggle-on: #4caf50;
                    }
                    body { 
                        padding: 10px; 
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
                        background-color: var(--background);
                        color: var(--foreground);
                        line-height: 1.4;
                        margin: 0;
                    }
                    .container {
                        max-width: 500px;
                        background-color: var(--primary);
                        border-radius: 6px;
                        padding: 15px;
                        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
                    }
                    h1 { 
                        color: var(--foreground);
                        margin-bottom: 15px;
                        text-align: center;
                        font-size: 18px;
                    }
                    label { 
                        display: block; 
                        margin-top: 8px;
                        font-weight: bold;
                        color: var(--foreground);
                    }
                    input, select { 
                        width: 100%; 
                        padding: 6px; 
                        margin-top: 4px;
                        margin-bottom: 12px; 
                        border: 1px solid var(--highlight);
                        border-radius: 3px;
                        background-color: var(--secondary);
                        color: var(--foreground);
                        font-size: 13px;
                        box-sizing: border-box;
                    }
                    input:focus, select:focus {
                        outline: none;
                        border-color: var(--highlight);
                        box-shadow: 0 0 0 2px rgba(45, 140, 226, 0.5);
                    }
                    .extension-badges {
                        display: flex;
                        flex-wrap: wrap;
                        gap: 6px;
                        margin-top: 8px;
                    }
                    .extension-badge {
                        background-color: var(--badge-default); 
                        color: var(--foreground);
                        padding: 5px 10px;
                        border-radius: 12px;
                        font-size: 12px;
                        display: flex;
                        align-items: center;
                        user-select: none;
                        cursor: pointer;
                        transition: background-color 0.2s ease;
                    }
                    .extension-badge.selected {
                        background-color: var(--highlight); 
                    }
                    .extension-badge.disabled {
                        opacity: 0.5;
                        cursor: not-allowed;
                    }
                    .button-group {
                        display: flex;
                        gap: 10px;
                        margin-top: 15px;
                    }
                    button {
                        flex: 1;
                        padding: 10px;
                        border: none;
                        border-radius: 3px;
                        cursor: pointer;
                        font-weight: bold;
                        transition: background-color 0.2s ease;
                        font-size: 13px;
                        background-color: var(--highlight);
                        color: white;
                    }
                    button:hover {
                        background-color: #1b6fb2;
                    }
                    .loader-container {
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        height: 40px;
                    }
                    .loader {
                        border: 3px solid var(--primary);
                        border-top: 3px solid var(--highlight);
                        border-radius: 50%;
                        width: 20px;
                        height: 20px;
                        animation: spin 1s linear infinite;
                    }
                    #loaderText {
                        margin-left: 10px;
                        color: var(--foreground);
                        font-size: 13px;
                    }
                    @keyframes spin {
                        0% { transform: rotate(0deg); }
                        100% { transform: rotate(360deg); }
                    }
                    /* Estilo para el toggle switch */
                    .toggle-container {
                        display: flex;
                        align-items: center;
                        margin-top: 8px;
                        margin-bottom: 12px;
                    }
                    .toggle-switch {
                        position: relative;
                        display: inline-block;
                        width: 40px;
                        height: 20px;
                        margin-right: 10px;
                    }
                    .toggle-switch input {
                        opacity: 0;
                        width: 0;
                        height: 0;
                    }
                    .slider {
                        position: absolute;
                        cursor: pointer;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        background-color: var(--toggle-off);
                        transition: .4s;
                        border-radius: 34px;
                    }
                    .slider:before {
                        position: absolute;
                        content: "";
                        height: 14px;
                        width: 14px;
                        left: 3px;
                        bottom: 3px;
                        background-color: white;
                        transition: .4s;
                        border-radius: 50%;
                    }
                    input:checked + .slider {
                        background-color: var(--toggle-on);
                    }
                    input:checked + .slider:before {
                        transform: translateX(20px);
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>Configurar Extensión</h1>
                    <select id="configSelector">
                        <option value="">Crear nueva configuración</option>
                    </select>
                    <form id="config-form">
                        <label for="configName">Nombre de la Configuración:</label>
                        <input type="text" id="configName" required placeholder="Ingrese el nombre de la configuración">

                        <label for="directoryPath">Ruta del Directorio:</label>
                        <div class="example">Ejemplo: C:/Proyectos/MiProyecto</div>
                        <input type="text" id="directoryPath" required placeholder="Ingrese la ruta del directorio base">
                        
                        <label for="allowedDirectories">Directorios Permitidos:</label>
                        <div class="example">Ejemplo: src/app, src/componentes</div>
                        <input type="text" id="allowedDirectories" placeholder="Ingrese los directorios permitidos (separados por comas)">
                        
                        <label for="excludedDirectories">Directorios Excluidos:</label>
                        <div class="example">Ejemplo: node_modules, dist</div>
                        <input type="text" id="excludedDirectories" placeholder="Ingrese los directorios excluidos (separados por comas)">
                        
                        <label for="excludedFiles">Archivos Excluidos:</label>
                        <div class="example">Ejemplo: package-lock.json, .gitignore</div>
                        <input type="text" id="excludedFiles" placeholder="Ingrese los archivos excluidos (separados por comas)">

                        <div class="toggle-container">
                            <label for="showAllExtensionsCheckbox">Mostrar todas las combinaciones de extensiones:</label>
                            <label class="toggle-switch">
                                <input type="checkbox" id="showAllExtensionsCheckbox">
                                <span class="slider"></span>
                            </label>
                        </div>
                        
                        <label for="extensions">Extensiones de Archivo:</label>
                        <div class="loader-container" id="loaderContainer" style="display: none;">
                            <div class="loader"></div>
                            <div id="loaderText" style="margin-left: 10px;">Cargando extensiones...</div>
                        </div>
                        <div id="extensionBadges" class="extension-badges"></div>
                        
                        <div class="button-group">
                            <button type="submit">Guardar</button>
                            <button id="runSummary" type="button">Generar</button>
                            <button id="deleteConfig" type="button">Eliminar</button>
                        </div>
                    </form>
                </div>
                <script>
                    const vscode = acquireVsCodeApi();
                    const configSelector = document.getElementById('configSelector');
                    const configNameInput = document.getElementById('configName');
                    const directoryPathInput = document.getElementById('directoryPath');
                    const allowedDirectoriesInput = document.getElementById('allowedDirectories');
                    const excludedDirectoriesInput = document.getElementById('excludedDirectories');
                    const excludedFilesInput = document.getElementById('excludedFiles');
                    const showAllExtensionsCheckbox = document.getElementById('showAllExtensionsCheckbox');
                    const extensionBadgesDiv = document.getElementById('extensionBadges');
                    const runSummaryButton = document.getElementById('runSummary');
                    const deleteConfigButton = document.getElementById('deleteConfig');

                    let configurations = [];
                    let selectedExtensions = new Set();

                    // Valores por defecto
                    const defaultExcludedDirectories = [
                            'node_modules',
                            '.git',
                            'dist',
                            'build',
                            'out',
                            'target',
                            '.idea',
                            '.vscode',
                            '.gradle',
                            'bin',
                            'obj',
                            'logs',
                            'temp',
                            'tmp',
                            'cache',
                            'coverage',
                            '__pycache__',
                            'venv',
                            'env',
                            '.next',
                            '.nuxt',
                            'vendor'
                        ].join(', ');
                        const defaultExcludedFiles = [
                            'package-lock.json',
                            '.gitignore',
                            '.DS_Store',
                            'Thumbs.db',
                            '*.log',
                            '*.tmp',
                            '*.temp',
                            '*.swp',
                            '*.bak',
                            '*.class',
                            '*.pyc',
                            '*.pyo',
                            '*.exe',
                            '*.dll',
                            '*.obj',
                            '*.o',
                            '*.a',
                            '*.lib',
                            '*.so',
                            '*.dylib',
                            '*.ncb',
                            '*.sdf',
                            '*.suo',
                            '*.pdb',
                            '*.idb',
                            '.env',
                            '.env.local',
                            '.env.development.local',
                            '.env.test.local',
                            '.env.production.local',
                            'npm-debug.log*',
                            'yarn-debug.log*',
                            'yarn-error.log*',
                            '.pnp.*',
                            '*.sqlite'
                        ].join(', ');

                    // Función para inicializar la interfaz
                    function initializeInterface() {
                        configNameInput.value = '';
                        directoryPathInput.value = '';
                        allowedDirectoriesInput.value = '';
                        excludedDirectoriesInput.value = defaultExcludedDirectories;
                        excludedFilesInput.value = defaultExcludedFiles;
                        selectedExtensions.clear();
                        extensionBadgesDiv.innerHTML = '';
                        runSummaryButton.disabled = true;
                        deleteConfigButton.disabled = true;
                        showAllExtensionsCheckbox.checked = false;
                    }

                    // Inicializar la interfaz al cargar
                    initializeInterface();

                    vscode.postMessage({ command: 'getConfigs' });

                    function updateExtensionBadges(extensions) {
                        extensionBadgesDiv.innerHTML = '';
                        extensions.forEach(ext => {
                            const badge = document.createElement('div');
                            badge.className = 'extension-badge' + (selectedExtensions.has(ext) ? ' selected' : '');
                            badge.textContent = ext;
                            badge.classList.add('disabled');
                            extensionBadgesDiv.appendChild(badge);
                        });
                        disableBadges();
                    }

                    function toggleExtension(ext, badge) {
                        if (!badge.classList.contains('disabled')) {
                            if (selectedExtensions.has(ext)) {
                                selectedExtensions.delete(ext);
                                badge.classList.remove('selected');
                            } else {
                                selectedExtensions.add(ext);
                                badge.classList.add('selected');
                            }
                        }
                    }

                    function disableBadges() {
                        const badges = extensionBadgesDiv.querySelectorAll('.extension-badge');
                        badges.forEach(badge => {
                            badge.classList.add('disabled');
                            badge.onclick = null;
                        });
                    }

                    function enableBadges() {
                        const badges = extensionBadgesDiv.querySelectorAll('.extension-badge');
                        badges.forEach(badge => {
                            badge.classList.remove('disabled');
                            badge.onclick = () => toggleExtension(badge.textContent, badge);
                        });
                    }

                    function findExtensions() {
                        const directoryPath = directoryPathInput.value;
                        const allowedDirectories = allowedDirectoriesInput.value;
                        const excludedDirectories = excludedDirectoriesInput.value;
                        const excludedFiles = excludedFilesInput.value;
                        const showAllExtensions = showAllExtensionsCheckbox.checked;

                        if (directoryPath) {
                            const loaderContainer = document.getElementById('loaderContainer');
                            const loaderText = document.getElementById('loaderText');
                            loaderContainer.style.display = 'flex';
                            loaderText.textContent = 'Cargando extensiones...';
                            disableBadges();
                            const startTime = Date.now();
                            
                            vscode.postMessage({
                                command: 'findExtensions',
                                directoryPath,
                                allowedDirectories,
                                excludedDirectories,
                                excludedFiles,
                                showAllExtensions
                            });

                            window.extensionsReceived = () => {
                                const elapsedTime = Date.now() - startTime;
                                if (elapsedTime < 1000) {
                                    setTimeout(() => {
                                        loaderContainer.style.display = 'none';
                                        enableBadges();
                                    }, 1000 - elapsedTime);
                                } else {
                                    loaderContainer.style.display = 'none';
                                    enableBadges();
                                }
                            };
                        }
                    }

                    window.addEventListener('message', event => {
                        const message = event.data;
                        switch (message.command) {
                            case 'setConfigs':
                                configurations = message.configurations;
                                updateConfigSelector();
                                break;
                            case 'setExtensions':
                                updateExtensionBadges(message.extensions);
                                document.getElementById('loaderText').textContent = 'Actualizando extensiones...';
                                if (window.extensionsReceived) {
                                    window.extensionsReceived();
                                }
                                break;
                            case 'configSaved':
                                configSelector.value = message.configName;
                                break;
                        }
                    });

                    function updateConfigSelector() {
                        configSelector.innerHTML = '<option value="">Crear nueva configuración</option>';
                        configurations.forEach(config => {
                            const option = document.createElement('option');
                            option.value = config.name;
                            option.textContent = config.name;
                            configSelector.appendChild(option);
                        });
                    }

                    configSelector.addEventListener('change', (event) => {
                        const selectedConfig = configurations.find(c => c.name === event.target.value);
                        if (selectedConfig) {
                            configNameInput.value = selectedConfig.name;
                            directoryPathInput.value = selectedConfig.directoryPath;
                            allowedDirectoriesInput.value = selectedConfig.allowedDirectories;
                            excludedDirectoriesInput.value = selectedConfig.excludedDirectories || defaultExcludedDirectories;
                            excludedFilesInput.value = selectedConfig.excludedFiles || defaultExcludedFiles;
                            selectedExtensions = new Set(selectedConfig.extensions.map(ext => ext.toLowerCase()));
                            showAllExtensionsCheckbox.checked = selectedConfig.showAllExtensions !== undefined ? selectedConfig.showAllExtensions : false; // Manejar el valor por defecto
                            updateExtensionBadges(selectedConfig.extensions);
                            runSummaryButton.disabled = false;
                            deleteConfigButton.disabled = false;
                            findExtensions();
                        } else {
                            initializeInterface();
                        }
                    });


                    [directoryPathInput, allowedDirectoriesInput, excludedDirectoriesInput, excludedFilesInput, showAllExtensionsCheckbox].forEach(input => {
                        input.addEventListener('change', findExtensions);
                    });

                    document.getElementById('config-form').addEventListener('submit', (event) => {
                        event.preventDefault();
                        vscode.postMessage({
                            command: 'saveConfig',
                            name: configNameInput.value,
                            directoryPath: directoryPathInput.value,
                            allowedDirectories: allowedDirectoriesInput.value,
                            excludedDirectories: excludedDirectoriesInput.value,
                            excludedFiles: excludedFilesInput.value,
                            extensions: Array.from(selectedExtensions),
                            showAllExtensions: showAllExtensionsCheckbox.checked
                        });
                    });

                    runSummaryButton.addEventListener('click', () => {
                        const selectedConfigName = configSelector.value;
                        if (selectedConfigName) {
                            vscode.postMessage({ 
                                command: 'runSummary',
                                configName: selectedConfigName
                            });
                        } else {
                            vscode.window.showErrorMessage('Por favor, selecciona una configuración antes de generar el resumen.');
                        }
                    });

                    deleteConfigButton.addEventListener('click', () => {
                        if (configSelector.value) {
                            vscode.postMessage({ 
                                command: 'deleteConfig',
                                configName: configSelector.value
                            });
                        }
                    });
                    vscode.postMessage({ command: 'getConfigs' });
                </script>
            </body>
            </html>

        `;
    }
}
exports.SummaryViewProvider = SummaryViewProvider;
//# sourceMappingURL=SummaryViewProvider.js.map
/* Fin out\SummaryViewProvider.js */

/* Inicio out\SummaryViewProvider.js.map */
{"version":3,"file":"SummaryViewProvider.js","sourceRoot":"","sources":["../src/SummaryViewProvider.ts"],"names":[],"mappings":"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"}
/* Fin out\SummaryViewProvider.js.map */

/* Inicio out\test\extension.test.js */
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = __importStar(require("assert"));
// You can import and use all API from the 'vscode' module
// as well as import your extension to test it
const vscode = __importStar(require("vscode"));
// import * as myExtension from '../../extension';
suite('Extension Test Suite', () => {
    vscode.window.showInformationMessage('Start all tests.');
    test('Sample test', () => {
        assert.strictEqual(-1, [1, 2, 3].indexOf(5));
        assert.strictEqual(-1, [1, 2, 3].indexOf(0));
    });
});
//# sourceMappingURL=extension.test.js.map
/* Fin out\test\extension.test.js */

/* Inicio out\test\extension.test.js.map */
{"version":3,"file":"extension.test.js","sourceRoot":"","sources":["../../src/test/extension.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AAEjC,0DAA0D;AAC1D,8CAA8C;AAC9C,+CAAiC;AACjC,kDAAkD;AAElD,KAAK,CAAC,sBAAsB,EAAE,GAAG,EAAE;IAClC,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;IAEzD,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE;QACxB,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC"}
/* Fin out\test\extension.test.js.map */

/* Inicio out\test\extension.test.js.mapx */
{"version":3,"file":"extension.test.js","sourceRoot":"","sources":["../../src/test/extension.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AAEjC,0DAA0D;AAC1D,8CAA8C;AAC9C,+CAAiC;AACjC,kDAAkD;AAElD,KAAK,CAAC,sBAAsB,EAAE,GAAG,EAAE;IAClC,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;IAEzD,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE;QACxB,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC"}
/* Fin out\test\extension.test.js.mapx */

/* Inicio package.json */
{
  "name": "edev-summary",
  "displayName": "eDev Summary",
  "description": "Genera resúmenes de archivos de código fuente en un solo archivo RESUMEN.txt, útil como insumos para dar contexto a la IA de tu proyecto.",
  "version": "2.0.1",
  "repository": {
    "type": "git",
    "url": "https://github.com/yamidnozu/utilidades/tree/main/vscode-extensiones/ext1/summary1"
  },
  "publisher": "edevcoresummary",
  "engines": {
    "vscode": "^1.92.0"
  },
  "categories": [
    "Visualization",
    "Other",
    "Snippets",
    "Programming Languages"
  ],
  "icon": "resources/logo.png",
  "activationEvents": [
    "onView:summaryConfigView"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "configuration": {
      "title": "eDev ",
      "properties": {
        "summary1.configurations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Nombre de la configuración"
              },
              "directoryPath": {
                "type": "string",
                "description": "Ruta base de la carpeta para el resumen"
              },
              "allowedDirectories": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Carpetas permitidas para el resumen"
              },
              "excludedDirectories": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Carpetas excluidas del resumen"
              },
              "extensions": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Extensiones de archivo a incluir en el resumen"
              }
            }
          },
          "default": [],
          "description": "Múltiples configuraciones para diferentes proyectos"
        }
      }
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "summaryView",
          "title": "eDev Summary",
          "icon": "resources/summary.svg"
        }
      ]
    },
    "views": {
      "summaryView": [
        {
          "type": "webview",
          "id": "summaryConfigView",
          "name": "Configuración de Resumen"
        }
      ]
    },
    "commands": [
      {
        "command": "summary1.runSummary",
        "title": "Generar Resumen"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^7.1.3",
    "@types/mocha": "^8.2.2",
    "@types/node": "14.x",
    "@types/vscode": "^1.92.0",
    "@typescript-eslint/eslint-plugin": "^4.26.0",
    "@typescript-eslint/parser": "^4.26.0",
    "eslint": "^7.27.0",
    "glob": "^7.1.7",
    "mocha": "^10.7.3",
    "typescript": "^4.3.2",
    "vscode-test": "^1.5.2"
  }
}

/* Fin package.json */

/* Inicio src\extension.ts */

import * as vscode from 'vscode';
import { SummaryViewProvider } from './SummaryViewProvider';

export function activate(context: vscode.ExtensionContext) {
    console.log('Activating extension');
    const provider = new SummaryViewProvider(context.extensionUri);
    console.log('Provider created');

    context.subscriptions.push(
        vscode.window.registerWebviewViewProvider(SummaryViewProvider.viewType, provider)
    );
    console.log('Provider registered');

    let disposable = vscode.commands.registerCommand('summary1.runSummary', async () => {
        const config = vscode.workspace.getConfiguration('summary1');
        const configurations = config.get('configurations') as Array<{ name: string }>;

        if (configurations.length === 0) {
            vscode.window.showErrorMessage('No se encontraron configuraciones. Por favor, crea una configuración primero.');
            return;
        }

        if (configurations.length === 1) {
            await provider.runSummary(configurations[0].name);
            return;
        }

        const selected = await vscode.window.showQuickPick(
            configurations.map(c => c.name),
            { placeHolder: 'Selecciona una configuración para generar el resumen' }
        );

        if (selected) {
            await provider.runSummary(selected);
        }
    });

    context.subscriptions.push(disposable);
}

export function deactivate() {}
/* Fin src\extension.ts */

/* Inicio src\SummaryViewProvider.ts */
import * as fs from 'fs';
import micromatch from 'micromatch';
import * as path from 'path';
import * as vscode from 'vscode';

interface ConfigurationItem {
    name: string;
    directoryPath: string;
    allowedDirectories: string[];
    excludedDirectories: string[];
    excludedFiles: string[];
    extensions: string[];
    showAllExtensions: boolean; // Nueva propiedad para indicar si se deben mostrar todas las combinaciones de extensiones
}

export class SummaryViewProvider implements vscode.WebviewViewProvider {
    public static readonly viewType = 'summaryConfigView';

    constructor(private readonly _extensionUri: vscode.Uri) { }

    public resolveWebviewView(
        webviewView: vscode.WebviewView,
        context: vscode.WebviewViewResolveContext,
        _token: vscode.CancellationToken
    ) {
        webviewView.webview.options = { enableScripts: true };
        webviewView.webview.html = this.getWebviewContent(webviewView.webview);

        webviewView.webview.onDidReceiveMessage(
            async (message) => {
                switch (message.command) {
                    case 'saveConfig':
                        try {
                            const savedConfigName = await this.saveConfiguration(message);
                            await this.sendConfigsToWebview(webviewView.webview);
                            webviewView.webview.postMessage({ command: 'configSaved', configName: savedConfigName });
                        } catch (error) {
                            console.error('Error saving configuration:', error);
                        }
                        break;
                    case 'runSummary':
                        if (message.configName) {
                            await this.runSummary(message.configName);
                        } else {
                            vscode.window.showErrorMessage('No configuration selected.');
                        }
                        break;
                    case 'getConfigs':
                        await this.sendConfigsToWebview(webviewView.webview);
                        break;
                    case 'deleteConfig':
                        if (message.configName) {
                            await this.deleteConfiguration(message.configName);
                            await this.sendConfigsToWebview(webviewView.webview);
                        } else {
                            vscode.window.showErrorMessage('No configuration selected for deletion.');
                        }
                        break;
                    case 'findExtensions':
                        try {
                            const extensions = await this.findExtensions(
                                message.directoryPath,
                                message.allowedDirectories.split(',').map((dir: string) => dir.trim()),
                                message.excludedDirectories.split(',').map((dir: string) => dir.trim()),
                                message.excludedFiles.split(',').map((file: string) => file.trim()),
                                message.showAllExtensions // Enviar preferencia para mostrar todas las combinaciones de extensiones
                            );
                            webviewView.webview.postMessage({
                                command: 'setExtensions',
                                extensions: Array.from(extensions)
                            });
                        } catch (error) {
                            console.error('Error finding extensions:', error);
                            webviewView.webview.postMessage({
                                command: 'setExtensions',
                                extensions: []
                            });
                        }
                        break;
                }
            }
        );

        this.sendConfigsToWebview(webviewView.webview);
    }

    private async findExtensions(directoryPath: string, allowedDirectories: string[], excludedDirectories: string[], excludedFiles: string[], showAllExtensions: boolean): Promise<Set<string>> {
        const extensions = new Set<string>();

        const isExcluded = (relativePath: string) => {
            const normalizedPath = this.normalizePath(relativePath);
            return micromatch.isMatch(normalizedPath, excludedDirectories.map(this.normalizePath)) || 
                   micromatch.isMatch(path.basename(normalizedPath), excludedFiles);
        };

        const processDirectory = (dir: string, basePath: string) => {
            const files = fs.readdirSync(dir);
            for (const file of files) {
                const fullPath = path.join(dir, file);
                const relativePath = path.relative(basePath, fullPath);

                if (isExcluded(relativePath)) {
                    continue;
                }

                if (fs.statSync(fullPath).isDirectory()) {
                    processDirectory(fullPath, basePath); // Recursively process subdirectories
                } else {
                    const parts = file.split('.');
                    if (parts.length > 1) {
                        if (showAllExtensions) {
                            for (let i = 1; i < parts.length; i++) {
                                const ext = '.' + parts.slice(i).join('.').toLowerCase();
                                extensions.add(ext);
                            }
                        } else {
                            const ext = '.' + parts[parts.length - 1].toLowerCase();
                            extensions.add(ext);
                        }
                    }
                }
            }
        };

        if (allowedDirectories.length > 0) {
            for (const allowedDir of allowedDirectories) {
                const fullAllowedPath = path.join(directoryPath, allowedDir);
                if (fs.existsSync(fullAllowedPath)) {
                    processDirectory(fullAllowedPath, directoryPath);
                }
            }
        } else {
            processDirectory(directoryPath, directoryPath);
        }

        return extensions;
    }

    public async runSummary(configName: string) {
        const config = vscode.workspace.getConfiguration('summary1');
        const configurations = config.get('configurations') as ConfigurationItem[];
        const selectedConfig = configurations.find(c => c.name === configName);

        if (!selectedConfig) {
            vscode.window.showErrorMessage('Configuración seleccionada no encontrada.');
            return;
        }

        const { directoryPath, allowedDirectories, excludedDirectories, excludedFiles, extensions, showAllExtensions } = selectedConfig;

        if (!directoryPath || extensions.length === 0) {
            vscode.window.showErrorMessage('Por favor, configure todos los ajustes antes de generar el resumen.');
            return;
        }

        try {
            const summaryContent = await this.generateSummary(directoryPath, allowedDirectories, excludedDirectories, excludedFiles, extensions);

            if (summaryContent.trim() === '') {
                vscode.window.showErrorMessage('No se encontró contenido para el resumen. Verifique las extensiones y directorios seleccionados.');
                return;
            }

            const summaryPath = path.join(directoryPath, 'RESUMEN.TXT');
            fs.writeFileSync(summaryPath, summaryContent);

            vscode.window.showInformationMessage(`Resumen completado con éxito! Guardado en ${summaryPath}`);
        } catch (error) {
            vscode.window.showErrorMessage(`Error al generar el resumen: ${error}`);
        }
    }

    private async generateSummary(directoryPath: string, allowedDirectories: string[], excludedDirectories: string[], excludedFiles: string[], extensions: string[]): Promise<string> {
        let summaryContent = '';

        const isExcluded = (relativePath: string) => {
            const normalizedPath = this.normalizePath(relativePath);
            return micromatch.isMatch(normalizedPath, excludedDirectories.map(this.normalizePath)) || 
                   micromatch.isMatch(path.basename(normalizedPath), excludedFiles);
        };

        const processDirectory = (dir: string, basePath: string) => {
            const files = fs.readdirSync(dir);
            for (const file of files) {
                const fullPath = path.join(dir, file);
                const relativePath = path.relative(basePath, fullPath);

                if (isExcluded(relativePath)) {
                    continue;
                }

                if (fs.statSync(fullPath).isDirectory()) {
                    processDirectory(fullPath, basePath); // Recursively process subdirectories
                } else {
                    const parts = file.split('.');
                    if (parts.length > 1) {
                        for (let i = 1; i < parts.length; i++) {
                            const ext = '.' + parts.slice(i).join('.').toLowerCase();
                            if (extensions.includes(ext)) {
                                const content = fs.readFileSync(fullPath, 'utf8');
                                summaryContent += `\n/* Inicio ${relativePath} */\n${content}\n/* Fin ${relativePath} */\n`;
                                break; // Stop after the first matching extension
                            }
                        }
                    }
                }
            }
        };

        if (allowedDirectories.length > 0) {
            for (const allowedDir of allowedDirectories) {
                const fullAllowedPath = path.join(directoryPath, allowedDir);
                if (fs.existsSync(fullAllowedPath)) {
                    processDirectory(fullAllowedPath, directoryPath);
                }
            }
        } else {
            processDirectory(directoryPath, directoryPath);
        }

        return summaryContent;
    }

    private normalizePath(inputPath: string): string {
        let normalized = inputPath.replace(/\\/g, '/');
        normalized = normalized.replace(/([^:])\/+/g, '$1/');
        return normalized;
    }

    private async sendConfigsToWebview(webview: vscode.Webview) {
        const config = vscode.workspace.getConfiguration('summary1');
        const configurations = config.get('configurations') as ConfigurationItem[];
    
        webview.postMessage({
            command: 'setConfigs',
            configurations: configurations.map(c => ({
                ...c,
                allowedDirectories: c.allowedDirectories.join(', '),
                excludedDirectories: c.excludedDirectories.join(', '),
                excludedFiles: c.excludedFiles.join(', '),
                showAllExtensions: c.showAllExtensions !== undefined ? c.showAllExtensions : false // Establecer un valor por defecto si no está presente
            }))
        });
    }   

    private async saveConfiguration(message: any): Promise<string> {
        try {
            const config = vscode.workspace.getConfiguration('summary1');
            let configurations = config.get('configurations') as ConfigurationItem[];

            const newConfig: ConfigurationItem = {
                name: message.name,
                directoryPath: message.directoryPath,
                allowedDirectories: message.allowedDirectories.split(',').map((dir: string) => dir.trim()),
                excludedDirectories: message.excludedDirectories.split(',').map((dir: string) => dir.trim()),
                excludedFiles: message.excludedFiles.split(',').map((file: string) => file.trim()),
                extensions: message.extensions,
                showAllExtensions: message.showAllExtensions // Guardar la preferencia de mostrar todas las extensiones
            };

            const existingIndex = configurations.findIndex(c => c.name === newConfig.name);
            if (existingIndex !== -1) {
                configurations[existingIndex] = newConfig;
            } else {
                configurations.push(newConfig);
            }

            await config.update('configurations', configurations, vscode.ConfigurationTarget.Global);
            vscode.window.showInformationMessage('Configuración guardada correctamente');
            return newConfig.name;
        } catch (error) {
            vscode.window.showErrorMessage(`Error al guardar la configuración: ${error}`);
            throw error;
        }
    }

    private async deleteConfiguration(configName: string) {
        try {
            const config = vscode.workspace.getConfiguration('summary1');
            let configurations = config.get('configurations') as ConfigurationItem[];
            configurations = configurations.filter(c => c.name !== configName);
            await config.update('configurations', configurations, vscode.ConfigurationTarget.Global);
            vscode.window.showInformationMessage('Configuración eliminada exitosamente');
        } catch (error) {
            vscode.window.showErrorMessage(`Error al eliminar la configuración: ${error}`);
        }
    }

    private getWebviewContent(webview: vscode.Webview) {
        return `
            <!DOCTYPE html>
            <html lang="es">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Configuración de eDev Summary</title>
                <style>
                    :root {
                        --background: #1e1e1e;
                        --foreground: #e0e0e0;
                        --primary: #2c2c2c;
                        --secondary: #383838;
                        --highlight: #2d8ce2; 
                        --badge-default: #6a6a6a; 
                        --accent: #6a6a6a;
                        --error: #b85c5c;
                        --success: #4caf50;
                        --toggle-off: #888;
                        --toggle-on: #4caf50;
                    }
                    body { 
                        padding: 10px; 
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
                        background-color: var(--background);
                        color: var(--foreground);
                        line-height: 1.4;
                        margin: 0;
                    }
                    .container {
                        max-width: 500px;
                        background-color: var(--primary);
                        border-radius: 6px;
                        padding: 15px;
                        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
                    }
                    h1 { 
                        color: var(--foreground);
                        margin-bottom: 15px;
                        text-align: center;
                        font-size: 18px;
                    }
                    label { 
                        display: block; 
                        margin-top: 8px;
                        font-weight: bold;
                        color: var(--foreground);
                    }
                    input, select { 
                        width: 100%; 
                        padding: 6px; 
                        margin-top: 4px;
                        margin-bottom: 12px; 
                        border: 1px solid var(--highlight);
                        border-radius: 3px;
                        background-color: var(--secondary);
                        color: var(--foreground);
                        font-size: 13px;
                        box-sizing: border-box;
                    }
                    input:focus, select:focus {
                        outline: none;
                        border-color: var(--highlight);
                        box-shadow: 0 0 0 2px rgba(45, 140, 226, 0.5);
                    }
                    .extension-badges {
                        display: flex;
                        flex-wrap: wrap;
                        gap: 6px;
                        margin-top: 8px;
                    }
                    .extension-badge {
                        background-color: var(--badge-default); 
                        color: var(--foreground);
                        padding: 5px 10px;
                        border-radius: 12px;
                        font-size: 12px;
                        display: flex;
                        align-items: center;
                        user-select: none;
                        cursor: pointer;
                        transition: background-color 0.2s ease;
                    }
                    .extension-badge.selected {
                        background-color: var(--highlight); 
                    }
                    .extension-badge.disabled {
                        opacity: 0.5;
                        cursor: not-allowed;
                    }
                    .button-group {
                        display: flex;
                        gap: 10px;
                        margin-top: 15px;
                    }
                    button {
                        flex: 1;
                        padding: 10px;
                        border: none;
                        border-radius: 3px;
                        cursor: pointer;
                        font-weight: bold;
                        transition: background-color 0.2s ease;
                        font-size: 13px;
                        background-color: var(--highlight);
                        color: white;
                    }
                    button:hover {
                        background-color: #1b6fb2;
                    }
                    .loader-container {
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        height: 40px;
                    }
                    .loader {
                        border: 3px solid var(--primary);
                        border-top: 3px solid var(--highlight);
                        border-radius: 50%;
                        width: 20px;
                        height: 20px;
                        animation: spin 1s linear infinite;
                    }
                    #loaderText {
                        margin-left: 10px;
                        color: var(--foreground);
                        font-size: 13px;
                    }
                    @keyframes spin {
                        0% { transform: rotate(0deg); }
                        100% { transform: rotate(360deg); }
                    }
                    /* Estilo para el toggle switch */
                    .toggle-container {
                        display: flex;
                        align-items: center;
                        margin-top: 8px;
                        margin-bottom: 12px;
                    }
                    .toggle-switch {
                        position: relative;
                        display: inline-block;
                        width: 40px;
                        height: 20px;
                        margin-right: 10px;
                    }
                    .toggle-switch input {
                        opacity: 0;
                        width: 0;
                        height: 0;
                    }
                    .slider {
                        position: absolute;
                        cursor: pointer;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        background-color: var(--toggle-off);
                        transition: .4s;
                        border-radius: 34px;
                    }
                    .slider:before {
                        position: absolute;
                        content: "";
                        height: 14px;
                        width: 14px;
                        left: 3px;
                        bottom: 3px;
                        background-color: white;
                        transition: .4s;
                        border-radius: 50%;
                    }
                    input:checked + .slider {
                        background-color: var(--toggle-on);
                    }
                    input:checked + .slider:before {
                        transform: translateX(20px);
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>Configurar Extensión</h1>
                    <select id="configSelector">
                        <option value="">Crear nueva configuración</option>
                    </select>
                    <form id="config-form">
                        <label for="configName">Nombre de la Configuración:</label>
                        <input type="text" id="configName" required placeholder="Ingrese el nombre de la configuración">

                        <label for="directoryPath">Ruta del Directorio:</label>
                        <div class="example">Ejemplo: C:/Proyectos/MiProyecto</div>
                        <input type="text" id="directoryPath" required placeholder="Ingrese la ruta del directorio base">
                        
                        <label for="allowedDirectories">Directorios Permitidos:</label>
                        <div class="example">Ejemplo: src/app, src/componentes</div>
                        <input type="text" id="allowedDirectories" placeholder="Ingrese los directorios permitidos (separados por comas)">
                        
                        <label for="excludedDirectories">Directorios Excluidos:</label>
                        <div class="example">Ejemplo: node_modules, dist</div>
                        <input type="text" id="excludedDirectories" placeholder="Ingrese los directorios excluidos (separados por comas)">
                        
                        <label for="excludedFiles">Archivos Excluidos:</label>
                        <div class="example">Ejemplo: package-lock.json, .gitignore</div>
                        <input type="text" id="excludedFiles" placeholder="Ingrese los archivos excluidos (separados por comas)">

                        <div class="toggle-container">
                            <label for="showAllExtensionsCheckbox">Mostrar todas las combinaciones de extensiones:</label>
                            <label class="toggle-switch">
                                <input type="checkbox" id="showAllExtensionsCheckbox">
                                <span class="slider"></span>
                            </label>
                        </div>
                        
                        <label for="extensions">Extensiones de Archivo:</label>
                        <div class="loader-container" id="loaderContainer" style="display: none;">
                            <div class="loader"></div>
                            <div id="loaderText" style="margin-left: 10px;">Cargando extensiones...</div>
                        </div>
                        <div id="extensionBadges" class="extension-badges"></div>
                        
                        <div class="button-group">
                            <button type="submit">Guardar</button>
                            <button id="runSummary" type="button">Generar</button>
                            <button id="deleteConfig" type="button">Eliminar</button>
                        </div>
                    </form>
                </div>
                <script>
                    const vscode = acquireVsCodeApi();
                    const configSelector = document.getElementById('configSelector');
                    const configNameInput = document.getElementById('configName');
                    const directoryPathInput = document.getElementById('directoryPath');
                    const allowedDirectoriesInput = document.getElementById('allowedDirectories');
                    const excludedDirectoriesInput = document.getElementById('excludedDirectories');
                    const excludedFilesInput = document.getElementById('excludedFiles');
                    const showAllExtensionsCheckbox = document.getElementById('showAllExtensionsCheckbox');
                    const extensionBadgesDiv = document.getElementById('extensionBadges');
                    const runSummaryButton = document.getElementById('runSummary');
                    const deleteConfigButton = document.getElementById('deleteConfig');

                    let configurations = [];
                    let selectedExtensions = new Set();

                    // Valores por defecto
                    const defaultExcludedDirectories = [
                            'node_modules',
                            '.git',
                            'dist',
                            'build',
                            'out',
                            'target',
                            '.idea',
                            '.vscode',
                            '.gradle',
                            'bin',
                            'obj',
                            'logs',
                            'temp',
                            'tmp',
                            'cache',
                            'coverage',
                            '__pycache__',
                            'venv',
                            'env',
                            '.next',
                            '.nuxt',
                            'vendor'
                        ].join(', ');
                        const defaultExcludedFiles = [
                            'package-lock.json',
                            '.gitignore',
                            '.DS_Store',
                            'Thumbs.db',
                            '*.log',
                            '*.tmp',
                            '*.temp',
                            '*.swp',
                            '*.bak',
                            '*.class',
                            '*.pyc',
                            '*.pyo',
                            '*.exe',
                            '*.dll',
                            '*.obj',
                            '*.o',
                            '*.a',
                            '*.lib',
                            '*.so',
                            '*.dylib',
                            '*.ncb',
                            '*.sdf',
                            '*.suo',
                            '*.pdb',
                            '*.idb',
                            '.env',
                            '.env.local',
                            '.env.development.local',
                            '.env.test.local',
                            '.env.production.local',
                            'npm-debug.log*',
                            'yarn-debug.log*',
                            'yarn-error.log*',
                            '.pnp.*',
                            '*.sqlite'
                        ].join(', ');

                    // Función para inicializar la interfaz
                    function initializeInterface() {
                        configNameInput.value = '';
                        directoryPathInput.value = '';
                        allowedDirectoriesInput.value = '';
                        excludedDirectoriesInput.value = defaultExcludedDirectories;
                        excludedFilesInput.value = defaultExcludedFiles;
                        selectedExtensions.clear();
                        extensionBadgesDiv.innerHTML = '';
                        runSummaryButton.disabled = true;
                        deleteConfigButton.disabled = true;
                        showAllExtensionsCheckbox.checked = false;
                    }

                    // Inicializar la interfaz al cargar
                    initializeInterface();

                    vscode.postMessage({ command: 'getConfigs' });

                    function updateExtensionBadges(extensions) {
                        extensionBadgesDiv.innerHTML = '';
                        extensions.forEach(ext => {
                            const badge = document.createElement('div');
                            badge.className = 'extension-badge' + (selectedExtensions.has(ext) ? ' selected' : '');
                            badge.textContent = ext;
                            badge.classList.add('disabled');
                            extensionBadgesDiv.appendChild(badge);
                        });
                        disableBadges();
                    }

                    function toggleExtension(ext, badge) {
                        if (!badge.classList.contains('disabled')) {
                            if (selectedExtensions.has(ext)) {
                                selectedExtensions.delete(ext);
                                badge.classList.remove('selected');
                            } else {
                                selectedExtensions.add(ext);
                                badge.classList.add('selected');
                            }
                        }
                    }

                    function disableBadges() {
                        const badges = extensionBadgesDiv.querySelectorAll('.extension-badge');
                        badges.forEach(badge => {
                            badge.classList.add('disabled');
                            badge.onclick = null;
                        });
                    }

                    function enableBadges() {
                        const badges = extensionBadgesDiv.querySelectorAll('.extension-badge');
                        badges.forEach(badge => {
                            badge.classList.remove('disabled');
                            badge.onclick = () => toggleExtension(badge.textContent, badge);
                        });
                    }

                    function findExtensions() {
                        const directoryPath = directoryPathInput.value;
                        const allowedDirectories = allowedDirectoriesInput.value;
                        const excludedDirectories = excludedDirectoriesInput.value;
                        const excludedFiles = excludedFilesInput.value;
                        const showAllExtensions = showAllExtensionsCheckbox.checked;

                        if (directoryPath) {
                            const loaderContainer = document.getElementById('loaderContainer');
                            const loaderText = document.getElementById('loaderText');
                            loaderContainer.style.display = 'flex';
                            loaderText.textContent = 'Cargando extensiones...';
                            disableBadges();
                            const startTime = Date.now();
                            
                            vscode.postMessage({
                                command: 'findExtensions',
                                directoryPath,
                                allowedDirectories,
                                excludedDirectories,
                                excludedFiles,
                                showAllExtensions
                            });

                            window.extensionsReceived = () => {
                                const elapsedTime = Date.now() - startTime;
                                if (elapsedTime < 1000) {
                                    setTimeout(() => {
                                        loaderContainer.style.display = 'none';
                                        enableBadges();
                                    }, 1000 - elapsedTime);
                                } else {
                                    loaderContainer.style.display = 'none';
                                    enableBadges();
                                }
                            };
                        }
                    }

                    window.addEventListener('message', event => {
                        const message = event.data;
                        switch (message.command) {
                            case 'setConfigs':
                                configurations = message.configurations;
                                updateConfigSelector();
                                break;
                            case 'setExtensions':
                                updateExtensionBadges(message.extensions);
                                document.getElementById('loaderText').textContent = 'Actualizando extensiones...';
                                if (window.extensionsReceived) {
                                    window.extensionsReceived();
                                }
                                break;
                            case 'configSaved':
                                configSelector.value = message.configName;
                                break;
                        }
                    });

                    function updateConfigSelector() {
                        configSelector.innerHTML = '<option value="">Crear nueva configuración</option>';
                        configurations.forEach(config => {
                            const option = document.createElement('option');
                            option.value = config.name;
                            option.textContent = config.name;
                            configSelector.appendChild(option);
                        });
                    }

                    configSelector.addEventListener('change', (event) => {
                        const selectedConfig = configurations.find(c => c.name === event.target.value);
                        if (selectedConfig) {
                            configNameInput.value = selectedConfig.name;
                            directoryPathInput.value = selectedConfig.directoryPath;
                            allowedDirectoriesInput.value = selectedConfig.allowedDirectories;
                            excludedDirectoriesInput.value = selectedConfig.excludedDirectories || defaultExcludedDirectories;
                            excludedFilesInput.value = selectedConfig.excludedFiles || defaultExcludedFiles;
                            selectedExtensions = new Set(selectedConfig.extensions.map(ext => ext.toLowerCase()));
                            showAllExtensionsCheckbox.checked = selectedConfig.showAllExtensions !== undefined ? selectedConfig.showAllExtensions : false; // Manejar el valor por defecto
                            updateExtensionBadges(selectedConfig.extensions);
                            runSummaryButton.disabled = false;
                            deleteConfigButton.disabled = false;
                            findExtensions();
                        } else {
                            initializeInterface();
                        }
                    });


                    [directoryPathInput, allowedDirectoriesInput, excludedDirectoriesInput, excludedFilesInput, showAllExtensionsCheckbox].forEach(input => {
                        input.addEventListener('change', findExtensions);
                    });

                    document.getElementById('config-form').addEventListener('submit', (event) => {
                        event.preventDefault();
                        vscode.postMessage({
                            command: 'saveConfig',
                            name: configNameInput.value,
                            directoryPath: directoryPathInput.value,
                            allowedDirectories: allowedDirectoriesInput.value,
                            excludedDirectories: excludedDirectoriesInput.value,
                            excludedFiles: excludedFilesInput.value,
                            extensions: Array.from(selectedExtensions),
                            showAllExtensions: showAllExtensionsCheckbox.checked
                        });
                    });

                    runSummaryButton.addEventListener('click', () => {
                        const selectedConfigName = configSelector.value;
                        if (selectedConfigName) {
                            vscode.postMessage({ 
                                command: 'runSummary',
                                configName: selectedConfigName
                            });
                        } else {
                            vscode.window.showErrorMessage('Por favor, selecciona una configuración antes de generar el resumen.');
                        }
                    });

                    deleteConfigButton.addEventListener('click', () => {
                        if (configSelector.value) {
                            vscode.postMessage({ 
                                command: 'deleteConfig',
                                configName: configSelector.value
                            });
                        }
                    });
                    vscode.postMessage({ command: 'getConfigs' });
                </script>
            </body>
            </html>

        `;
    }
}

/* Fin src\SummaryViewProvider.ts */

/* Inicio src\test\extension.test.ts */
import * as assert from 'assert';

// You can import and use all API from the 'vscode' module
// as well as import your extension to test it
import * as vscode from 'vscode';
// import * as myExtension from '../../extension';

suite('Extension Test Suite', () => {
	vscode.window.showInformationMessage('Start all tests.');

	test('Sample test', () => {
		assert.strictEqual(-1, [1, 2, 3].indexOf(5));
		assert.strictEqual(-1, [1, 2, 3].indexOf(0));
	});
});

/* Fin src\test\extension.test.ts */

/* Inicio tsconfig.json */
{
	"compilerOptions": {
		"module": "Node16",
		"target": "ES2022",
		"outDir": "out",
		"lib": [
			"ES2022"
		],
		"sourceMap": true,
		"rootDir": "src",
		"strict": true   /* enable all strict type-checking options */
		/* Additional Checks */
		// "noImplicitReturns": true, /* Report error when not all code paths in function return a value. */
		// "noFallthroughCasesInSwitch": true, /* Report errors for fallthrough cases in switch statement. */
		// "noUnusedParameters": true,  /* Report errors on unused parameters. */
	}
}

/* Fin tsconfig.json */
